[
  {
    "objectID": "Project2.html",
    "href": "Project2.html",
    "title": "Project 2",
    "section": "",
    "text": "The purpose of this Quarto document is to prepare and explore the data in a static manner that will be used to construct our Shiny app for project 2. We are using the Mobile Device Usage data set. We start by importing the data, as well as packages we will use throughout this Quarto document.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nuser_data &lt;- read_csv('project2-app/user_behavior_dataset.csv')\n\nRows: 700 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Device Model, Operating System, Gender\ndbl (8): User ID, App Usage Time (min/day), Screen On Time (hours/day), Batt...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Project2.html#purpose-and-preliminaries",
    "href": "Project2.html#purpose-and-preliminaries",
    "title": "Project 2",
    "section": "",
    "text": "The purpose of this Quarto document is to prepare and explore the data in a static manner that will be used to construct our Shiny app for project 2. We are using the Mobile Device Usage data set. We start by importing the data, as well as packages we will use throughout this Quarto document.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nuser_data &lt;- read_csv('project2-app/user_behavior_dataset.csv')\n\nRows: 700 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Device Model, Operating System, Gender\ndbl (8): User ID, App Usage Time (min/day), Screen On Time (hours/day), Batt...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Project2.html#preparing-the-data",
    "href": "Project2.html#preparing-the-data",
    "title": "Project 2",
    "section": "Preparing the Data",
    "text": "Preparing the Data\nOur first step is to ensure each variable in the tibble is of the appropriate data type. We view the tibble.\n\nuser_data\n\n# A tibble: 700 × 11\n   `User ID` `Device Model`     `Operating System` `App Usage Time (min/day)`\n       &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;                                   &lt;dbl&gt;\n 1         1 Google Pixel 5     Android                                   393\n 2         2 OnePlus 9          Android                                   268\n 3         3 Xiaomi Mi 11       Android                                   154\n 4         4 Google Pixel 5     Android                                   239\n 5         5 iPhone 12          iOS                                       187\n 6         6 Google Pixel 5     Android                                    99\n 7         7 Samsung Galaxy S21 Android                                   350\n 8         8 OnePlus 9          Android                                   543\n 9         9 Samsung Galaxy S21 Android                                   340\n10        10 iPhone 12          iOS                                       424\n# ℹ 690 more rows\n# ℹ 7 more variables: `Screen On Time (hours/day)` &lt;dbl&gt;,\n#   `Battery Drain (mAh/day)` &lt;dbl&gt;, `Number of Apps Installed` &lt;dbl&gt;,\n#   `Data Usage (MB/day)` &lt;dbl&gt;, Age &lt;dbl&gt;, Gender &lt;chr&gt;,\n#   `User Behavior Class` &lt;dbl&gt;\n\n\nIt appears that Device Model, Operating System, Gender, and User Behavior Class are our categorical variables, whereas the remaining variables are numeric/quantitative. We change the categorical variables so they are stored as factors in our tibble.\n\nuser_data &lt;- user_data |&gt;\n  mutate(`Device Model` = as.factor(`Device Model`),\n         `Operating System` = as.factor(`Operating System`),\n         Gender = as.factor(Gender),\n         `User Behavior Class` = as.factor(`User Behavior Class`))\n\nNow that are data are stored in the desired form, we perform our final step of modifying the variable names (when applicable) so that they follow R naming conventions.\n\nuser_data &lt;- user_data |&gt;\n  rename('user_id' = `User ID`,\n         'device_model' = `Device Model`,\n         'operating_system' = `Operating System`,\n         'app_use_time' = `App Usage Time (min/day)`,\n         'screen_on_time' = `Screen On Time (hours/day)`,\n         'battery_drain' = `Battery Drain (mAh/day)`,\n         'app_number' = `Number of Apps Installed`,\n         'data_usage' = `Data Usage (MB/day)`,\n         'behavior_class' = `User Behavior Class`)"
  },
  {
    "objectID": "Project2.html#numerical-summaries-categorical-variables",
    "href": "Project2.html#numerical-summaries-categorical-variables",
    "title": "Project 2",
    "section": "Numerical Summaries: Categorical Variables",
    "text": "Numerical Summaries: Categorical Variables\nWe perform some numerical summaries for categorical variables. We use the table function from base R for this purpose. We first produce one-way contingency tables for each categorical variable.\n\ntable(user_data$device_model)\n\n\n    Google Pixel 5          iPhone 12          OnePlus 9 Samsung Galaxy S21 \n               142                146                133                133 \n      Xiaomi Mi 11 \n               146 \n\ntable(user_data$operating_system)\n\n\nAndroid     iOS \n    554     146 \n\ntable(user_data$Gender)\n\n\nFemale   Male \n   336    364 \n\ntable(user_data$behavior_class)\n\n\n  1   2   3   4   5 \n136 146 143 139 136 \n\n\nNext we will create two-way contingency tables. We choose a couple of representative pairs of categorical variables for this purpose.\n\nuser_data |&gt;\n  select(device_model, Gender) |&gt;\n  table()\n\n                    Gender\ndevice_model         Female Male\n  Google Pixel 5         69   73\n  iPhone 12              74   72\n  OnePlus 9              61   72\n  Samsung Galaxy S21     54   79\n  Xiaomi Mi 11           78   68\n\nuser_data |&gt;\n  select(behavior_class, operating_system) |&gt;\n  table()\n\n              operating_system\nbehavior_class Android iOS\n             1     114  22\n             2     114  32\n             3     111  32\n             4     110  29\n             5     105  31"
  },
  {
    "objectID": "Project2.html#numerical-summaries-quantitative-variables",
    "href": "Project2.html#numerical-summaries-quantitative-variables",
    "title": "Project 2",
    "section": "Numerical Summaries: Quantitative Variables",
    "text": "Numerical Summaries: Quantitative Variables\nNext we perform numerical summaries for quantitative variables at different levels of categorical variables.\nOur first example will be summaries of app use time by gender.\n\nuser_data |&gt;\n  group_by(Gender) |&gt;\n  summarize('mean' = mean(app_use_time), \n            'median' = median(app_use_time),\n            'SD' = sd(app_use_time),\n            'IQR' = IQR(app_use_time),\n            'minimum' = min(app_use_time),\n            'maximum' = max(app_use_time))\n\n# A tibble: 2 × 7\n  Gender  mean median    SD   IQR minimum maximum\n  &lt;fct&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 Female  272.    230  174.  305.      31     598\n2 Male    270.    222  180.  341.      30     595\n\n\nOur next example will be summaries of app use time by gender and operating system.\n\nuser_data |&gt;\n  group_by(Gender, operating_system) |&gt;\n  summarize('mean' = mean(app_use_time), \n            'median' = median(app_use_time),\n            'SD' = sd(app_use_time),\n            'IQR' = IQR(app_use_time),\n            'minimum' = min(app_use_time),\n            'maximum' = max(app_use_time))\n\n`summarise()` has grouped output by 'Gender'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 × 8\n# Groups:   Gender [2]\n  Gender operating_system  mean median    SD   IQR minimum maximum\n  &lt;fct&gt;  &lt;fct&gt;            &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 Female Android           268.   230   176.  314.      31     598\n2 Female iOS               286.   244.  167.  274.      33     597\n3 Male   Android           268.   216.  182.  346.      30     595\n4 Male   iOS               278.   260.  174.  311.      32     581\n\n\nFinally, we will look at number of apps installed by behavior class.\n\nuser_data |&gt;\n  group_by(behavior_class) |&gt;\n  summarize('mean' = mean(app_number), \n            'median' = median(app_number),\n            'SD' = sd(app_number),\n            'IQR' = IQR(app_number),\n            'minimum' = min(app_number),\n            'maximum' = max(app_number))\n\n# A tibble: 5 × 7\n  behavior_class  mean median    SD   IQR minimum maximum\n  &lt;fct&gt;          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 1               14.6   15    2.90     5      10      19\n2 2               30.8   31.5  5.64    10      21      39\n3 3               50     49    5.51    10      41      59\n4 4               69.9   69    5.42     9      61      79\n5 5               89.2   89    5.48     9      81      99"
  },
  {
    "objectID": "Project2.html#exploratory-data-analysis-plotting",
    "href": "Project2.html#exploratory-data-analysis-plotting",
    "title": "Project 2",
    "section": "Exploratory Data Analysis Plotting",
    "text": "Exploratory Data Analysis Plotting\nIn this section we create several plots to explore our data.\nOur first plot will be a scatter plot of app usage time versus number of apps, grouped by gender.\n\nuser_data |&gt;\n  ggplot(aes(app_number, app_use_time)) + geom_point(aes(color = Gender)) + labs(x = 'Number of Apps Installed', y = 'App Usage Time (min/day)', title = 'App Usage Time by Number of Apps Installed and Gender')\n\n\n\n\n\n\n\n\nOur next plot will be a bar plot of behavior class by operating system and gender.\n\nuser_data |&gt;\n  ggplot(aes(behavior_class)) + geom_bar(aes(fill = operating_system), position = 'dodge') + facet_wrap(~ Gender) + labs(x = 'User Behavior Class', title = 'User Behavior Class Counts by Operating System and Gender', fill = 'Operating System')\n\n\n\n\n\n\n\n\nNext we will create a density plot of app use time by gender and device model.\n\nuser_data |&gt;\n  ggplot(aes(app_use_time)) + geom_density(aes(fill = Gender), alpha = 0.5) + facet_wrap(~device_model) + labs(x = 'App Usage Time (min/day)', y = 'Density', title = 'Distribution of App Usage Time by Gender and Device Model') \n\n\n\n\n\n\n\n\nNext we create a box plot of app number by user behavior class and operating system.\n\nuser_data |&gt;\n  ggplot(aes(x = behavior_class, y = app_number)) + geom_boxplot() + facet_wrap(~operating_system) + labs(x = 'User Behavior Class', y = 'Number of Apps Installed', title = 'Number of Apps Installed by User Behavior Class') + theme_light()\n\n\n\n\n\n\n\n\nNext we create box plots of app use time by gender and operating system.\n\nuser_data |&gt;\n  ggplot(aes(x = Gender, y = app_use_time)) + geom_boxplot() + facet_wrap(~operating_system) + labs(x = 'Gender', y = 'App Usage Time (min/day)', title = 'App Usage Time by Gender and Operating System') + theme_light()\n\n\n\n\n\n\n\n\nFinally we create a plot type that was not covered in class: a correlation matrix. We use the ggcorrplot to create the correlation matrix. We round all correlation values to one decimal place.\n\nlibrary(ggcorrplot)\n\ncorr_matrix &lt;- user_data[unlist(lapply(user_data, is.numeric))] |&gt;\n  select(!user_id) |&gt;\n  cor() |&gt;\n  round(1)\n\nggcorrplot(corr_matrix, lab = T, title = 'Correlation Matrix for Mobile Device Usage Data', colors = c('yellow', 'blue', 'green'))\n\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\nℹ The deprecated feature was likely used in the ggcorrplot package.\n  Please report the issue at &lt;https://github.com/kassambara/ggcorrplot/issues&gt;.\n\n\n\n\n\n\n\n\n\nWe see from the plot that all of the quantitative variables in the Mobile Device Usage data set are highly positively correlated with one another, except for age, which has nearly no correlation with any of the other variables."
  }
]